Task 1: 

The program performs an inconsistent run, based on the requirements, since when repeatedly compiled, it yields different outputs for each bank account every time. Thus, the thread execution is not atomic because threads can interfere with each other in mid-execution. In other words, context switching occurs during one of the processes before it finishes its execution, hence there is no atomicity in the interference which leads to a memory type related errors (memory inconsistency).

Task 2: 

Threads may not execute sequentially since the operating system determines the order in which the threads are executed. At first, the thread is in the NEW state (when a instance of Thread class is created), then the thread is in the RUNNABLE state after invoking the start() method, afterwards if the thread is in the thread scheduler, the thread is in the RUNNING state, else the thread is in the NON-RUNNABLE state (if not eligible to run and still alive). Finally the thread is in the DEAD state when the run() method exits. In other words, the states are: NEW, RUNNABLE, RUNNING, NON-RUNNABLE and TERMINATED. Furthermore, the consistency of the accounts are not preserved since the amount in the account varies/changes each time the program is compiled.

Taks 3: Please see programming files related to this task
Taks 4: Please see programming files related to this task

Task 5: 

A synchronized block is better since it allows the user to synchronize on a different object and limit the scope of synchronization. In other words, it allows to synchronize more specifically the critical section of the code. On the other hand, the method synchronization locks in the current instantiated object for the whole duration of the method, even though there may be a part of the method that does not require synchronization.
